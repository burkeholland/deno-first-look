{"componentChunkName":"component---src-templates-lesson-template-js","path":"/permissions/granting-permissions","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>Make sure you are on the <a href=\"https://github.com/burkeholland/deno-exercises/tree/5-granting-permissions\">5-granting-permissions</a> branch to follow along with this section.</p>\n</blockquote>\n<p>One of the core principles of Deno is \"secure by default\". As we discussed in the section of the same name, this means that by default, Deno can't do very much without your permission. It can't read your file system, it can't make HTTP calls - it's completely sandboxed.</p>\n<p>In the \"app.ts\" file, attempt to read all of the files in the current directory. This can be done with the \"Deno\" object \"read\" method.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Deno<span class=\"token punctuation\">.</span><span class=\"token function\">readDir</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> result <span class=\"token keyword\">of</span> results<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Execute \"app.ts\" from the terminal</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">deno run app.ts</code></pre></div>\n<p>This should throw an error saying that you don't have read access.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">error: Uncaught <span class=\"token punctuation\">(</span>in promise<span class=\"token punctuation\">)</span> PermissionDenied: <span class=\"token builtin class-name\">read</span> access to <span class=\"token string\">\".\"</span>, run again with the --allow-read flag\nat processResponse <span class=\"token punctuation\">(</span>core.js:226:13<span class=\"token punctuation\">)</span>\nat Object.jsonOpAsync <span class=\"token punctuation\">(</span>core.js:244:12<span class=\"token punctuation\">)</span>\nat async Object.<span class=\"token punctuation\">[</span>Symbol.asyncIterator<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span>deno:cli/rt/30_fs.js:125:16<span class=\"token punctuation\">)</span>\nat async file:///home/burkeholland/dev/deno-first-look-exercises/app.ts:3:18</code></pre></div>\n<p>It says to run again with the <code class=\"language-text\">--allow-read</code> flag. Let's do that.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">deno run --allow-read app.ts</code></pre></div>\n<p>This time Deno reads the contents of the current directory and writes them out to the terminal.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">{</span> name: <span class=\"token string\">\"README.md\"</span>, isFile: true, isDirectory: false, isSymlink: <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span> name: <span class=\"token string\">\".git\"</span>, isFile: false, isDirectory: true, isSymlink: <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span> name: <span class=\"token string\">\"app.ts\"</span>, isFile: true, isDirectory: false, isSymlink: <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span> name: <span class=\"token string\">\".vscode\"</span>, isFile: false, isDirectory: true, isSymlink: <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span> name: <span class=\"token string\">\"utils.ts\"</span>, isFile: true, isDirectory: false, isSymlink: <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note that by default, the <code class=\"language-text\">--allow-read</code> flag lets the program read anything that the executing account can read. It's possible to pass a path to the <code class=\"language-text\">--allow-read</code> flag that restricts the access to a certain directory.</p>\n<p>Run the program again with the following command</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">deno run --allow-read<span class=\"token operator\">=</span>. app.ts</code></pre></div>\n<p>The program now fails. This is because we didn't give it enough access. We said it could read the current directory \"exercise\", but the program is trying to read the parent directory.</p>\n<p>Try it again passing in the parent path...</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">deno run --allow-read<span class=\"token operator\">=</span><span class=\"token punctuation\">..</span>/ app.ts</code></pre></div>\n<p>The program should run successfully.</p>\n<p>Passing flags like this is how you explicitly give code elevated access. But it is not the only way. The other way to get elevated access in Deno is to request it from the code itself. This is more akin to the way that apps on your phone will ask for access to your location, photos, notifications, etc.</p>","frontmatter":{"path":"/permissions/granting-permissions","title":"Granting Permissions","order":"5A","section":"5 - Permissions","description":"Burke explores the unique permissions model of Deno."}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":"4D","path":"/dependencies/best-practices","title":"Best Practices"}}},{"node":{"frontmatter":{"order":"4E","path":"/dependencies/compatibility-with-node","title":"Compatibility With Node"}}},{"node":{"frontmatter":{"order":"4B","path":"/dependencies/local-dependencies","title":"Local dependencies"}}},{"node":{"frontmatter":{"order":"4C","path":"/dependencies/remote-dependencies","title":"Remote dependencies"}}},{"node":{"frontmatter":{"order":"4A","path":"/dependencies/think-like-a-browser","title":"Thinking like a browser"}}},{"node":{"frontmatter":{"order":"8A","path":"/deploying/containerize-deno-app","title":"Containerizing a Deno Application"}}},{"node":{"frontmatter":{"order":"8C","path":"/deploying/deploy-deno-image","title":"Deploying the Deno image"}}},{"node":{"frontmatter":{"order":"8B","path":"/deploying/push-to-image-registry","title":"Pushing the Deno image to a registry"}}},{"node":{"frontmatter":{"order":"3E","path":"/getting-to-know/arguments-and-flags","title":"CLI Tour"}}},{"node":{"frontmatter":{"order":"3F","path":"/getting-to-know/debugging","title":"Debugging"}}},{"node":{"frontmatter":{"order":"3D","path":"/getting-to-know/deno-object","title":"The Deno object"}}},{"node":{"frontmatter":{"order":"3C","path":"/getting-to-know/first-program","title":"Your first program"}}},{"node":{"frontmatter":{"order":"3A","path":"/getting-to-know/install","title":"Installing Deno"}}},{"node":{"frontmatter":{"order":"3B","path":"/getting-to-know/tooling","title":"Tooling"}}},{"node":{"frontmatter":{"order":"7A","path":"/oak/introducing-oak","title":"Introducing Oak"}}},{"node":{"frontmatter":{"order":"7C","path":"/oak/oak-router","title":"The Oak Router"}}},{"node":{"frontmatter":{"order":"7D","path":"/oak/oak-templates","title":"Templates"}}},{"node":{"frontmatter":{"order":"7B","path":"/oak/simple-oak","title":"A Simple Oak Server"}}},{"node":{"frontmatter":{"order":"7E","path":"/oak/static-files","title":"Serving Static Files"}}},{"node":{"frontmatter":{"order":"5D","path":"/permissions/determining-permissions","title":"Determining Permissions"}}},{"node":{"frontmatter":{"order":"5A","path":"/permissions/granting-permissions","title":"Granting Permissions"}}},{"node":{"frontmatter":{"order":"5C","path":"/permissions/permission-specificity","title":"Permission Specificity"}}},{"node":{"frontmatter":{"order":"5B","path":"/permissions/requesting-permissions","title":"Requesting Permissions"}}},{"node":{"frontmatter":{"order":"6B","path":"/webserver/reading-parameters","title":"Reading the query string"}}},{"node":{"frontmatter":{"order":"6A","path":"/webserver/simple","title":"Building a simple webserver"}}},{"node":{"frontmatter":{"order":"6C","path":"/webserver/static-files","title":"Serving up static files"}}},{"node":{"frontmatter":{"order":"1B","path":"/exercises","title":"How to use the exercises"}}},{"node":{"frontmatter":{"order":"1A","path":"/intro","title":"Introduction"}}},{"node":{"frontmatter":{"order":"2C","path":"/what-is/dependency-hell","title":"Dependency Hell"}}},{"node":{"frontmatter":{"order":"2B","path":"/what-is/secure-by-default","title":"Secure By Default"}}},{"node":{"frontmatter":{"order":"2D","path":"/what-is/typescript-first","title":"TypeScript First"}}},{"node":{"frontmatter":{"order":"2A","path":"/what-is/why-oh-why","title":"What & Why"}}}]}},"pageContext":{}},"staticQueryHashes":["2959687377"]}