{"componentChunkName":"component---src-templates-lesson-template-js","path":"/permissions/granting-permissions","result":{"data":{"markdownRemark":{"html":"<p>One of the core tenants of Deno is \"secure by default\". As we discussed in the section of the same name, this means that by default, Deno can't do very much without your permission. It can't read your file system, it can't make HTTP calls - it's completely sandboxed.</p>\n<blockquote>\n<p>Make sure you are on the <code class=\"language-text\">deno-permissions</code> branch</p>\n</blockquote>\n<ul>\n<li>\n<p>In the <code class=\"language-text\">app.ts</code> file, attempt to read all of the files in the current directory. This can be done with the \"Deno\" object \"read\" method.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Deno<span class=\"token punctuation\">.</span><span class=\"token function\">readDir</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> result <span class=\"token keyword\">of</span> results<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>Execute <code class=\"language-text\">app.ts</code> from the terminal</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">deno run app.ts</code></pre></div>\n</li>\n</ul>\n<p>This should throw an error saying that you don't have read access.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">```bash\nerror: Uncaught (in promise) PermissionDenied: read access to &quot;.&quot;, run again with the --allow-read flag\nat processResponse (core.js:226:13)\nat Object.jsonOpAsync (core.js:244:12)\nat async Object.[Symbol.asyncIterator] (deno:cli/rt/30_fs.js:125:16)\nat async file:///home/burkeholland/dev/deno-first-look-exercises/app.ts:3:18\n```</code></pre></div>\n<p>It says to run again with the \"--allow-read\" flag. Let's do that.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">```bash\ndeno run --allow-read app.ts\n```</code></pre></div>\n<p>This time Deno reads the contents of the current directory and writes them out to the terminal.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">```bash\n{ name: &quot;README.md&quot;, isFile: true, isDirectory: false, isSymlink: false }\n{ name: &quot;.git&quot;, isFile: false, isDirectory: true, isSymlink: false }\n{ name: &quot;app.ts&quot;, isFile: true, isDirectory: false, isSymlink: false }\n{ name: &quot;.vscode&quot;, isFile: false, isDirectory: true, isSymlink: false }\n{ name: &quot;utils.ts&quot;, isFile: true, isDirectory: false, isSymlink: false }\n```</code></pre></div>\n<p>Note that by default, the <code class=\"language-text\">--allow-read</code> flag lets the program read anything that the executing account can read. It's possible to pass a path to the <code class=\"language-text\">--allow-read</code> flag that restricts the access to a certain directory.</p>\n<ul>\n<li>\n<p>Run the program again with the following command</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">deno run --allow-read<span class=\"token operator\">=</span>. app.ts</code></pre></div>\n</li>\n</ul>\n<p>Passing flags like this is how you explicitly give code elevated access. But it is not the only way. The other way to get elevated access in Deno is to request it from the code itself. This is more akin to the way that apps on your phone will ask for access to your location, photos, notifications, ect.</p>","frontmatter":{"path":"/permissions/granting-permissions","title":"Granting Permissions","order":"5A","section":"Permissions","description":"Burke explores the unique permissions model of Deno."}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":"1A","path":"/intro","title":"Introduction"}}},{"node":{"frontmatter":{"order":"4E","path":"/dependencies/compatibility-with-node.md","title":"Compatibility With Node"}}},{"node":{"frontmatter":{"order":"4D","path":"/dependencies/best-practices.md","title":"Best Practices"}}},{"node":{"frontmatter":{"order":"4B","path":"/dependencies/local-dependencies.md","title":"Local dependencies"}}},{"node":{"frontmatter":{"order":"4C","path":"/dependencies/remote-dependencies.md","title":"Remote dependencies"}}},{"node":{"frontmatter":{"order":"4A","path":"/dependencies/think-like-a-browser.md","title":"Thinking like a browser"}}},{"node":{"frontmatter":{"order":"8B","path":"/oak/deploying","title":"Bundling Deno Apps"}}},{"node":{"frontmatter":{"order":"8B","path":"/oak/deploying","title":"Containerizing a Deno Application"}}},{"node":{"frontmatter":{"order":"8C","path":"/oak/deploying","title":"Deploying the Deno image"}}},{"node":{"frontmatter":{"order":"8B","path":"/oak/deploying","title":"Pushing the Deno image to a registry"}}},{"node":{"frontmatter":{"order":"3E","path":"/getting-to-know/arguments-and-flags","title":"CLI Tour"}}},{"node":{"frontmatter":{"order":"3F","path":"/getting-to-know/debugging","title":"Debugging"}}},{"node":{"frontmatter":{"order":"3C","path":"/getting-to-know/deno-object","title":"The Deno object"}}},{"node":{"frontmatter":{"order":"3D","path":"/getting-to-know/first-program","title":"Your first program"}}},{"node":{"frontmatter":{"order":"3A","path":"/getting-to-know/install","title":"Installing Deno"}}},{"node":{"frontmatter":{"order":"3B","path":"/getting-to-know/tooling","title":"Tooling"}}},{"node":{"frontmatter":{"order":"7A","path":"/oak/introducing-oak","title":"Introducing Oak"}}},{"node":{"frontmatter":{"order":"7C","path":"/oak/oak-router","title":"The Oak Router"}}},{"node":{"frontmatter":{"order":"7C","path":"/oak/oak-templates","title":"Templates"}}},{"node":{"frontmatter":{"order":"7B","path":"/oak/simple-oak","title":"A Simple Oak Server"}}},{"node":{"frontmatter":{"order":"7E","path":"/oak/simple-oak","title":"Servering Static Files"}}},{"node":{"frontmatter":{"order":"5D","path":"/permissions/determining-permissions","title":"Determining Permissions"}}},{"node":{"frontmatter":{"order":"5A","path":"/permissions/granting-permissions","title":"Granting Permissions"}}},{"node":{"frontmatter":{"order":"5C","path":"/permissions/permission-specificity","title":"Permission Specificity"}}},{"node":{"frontmatter":{"order":"5B","path":"/permissions/requesting-permissions","title":"Requesting Permissions"}}},{"node":{"frontmatter":{"order":"6B","path":"/webserver/reading-parameters","title":"Reading the query string"}}},{"node":{"frontmatter":{"order":"6A","path":"/webserver/simple","title":"Building a simple webserver"}}},{"node":{"frontmatter":{"order":"6C","path":"/webserver/static-files","title":"Servering up static files"}}},{"node":{"frontmatter":{"order":"2C","path":"/what-is/dependency-hell","title":"Dependency Hell"}}},{"node":{"frontmatter":{"order":"2B","path":"/what-is/secure-by-default","title":"Secure By Default"}}},{"node":{"frontmatter":{"order":"2D","path":"/what-is/typescript-first","title":"TypeScript First"}}},{"node":{"frontmatter":{"order":"2A","path":"/what-is/why-oh-why","title":"Why"}}}]}},"pageContext":{}},"staticQueryHashes":["2959687377"]}