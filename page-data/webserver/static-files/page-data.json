{"componentChunkName":"component---src-templates-lesson-template-js","path":"/webserver/static-files","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>Make sure you are on the \"6-serving-up-static-files\" branch to follow along with this exercise.</p>\n</blockquote>\n<p>Normally, we serve up HTML files with a web server. These are also called \"static files\", because the server doesn't change them, it just serves them. They are static.</p>\n<p>One way to serve a static file would be to read the file with the Deno object. There is an \"index.html\" file already in the project. Let's use the <code class=\"language-text\">Deno</code> object to read that file off of disk and serve it up.</p>\n<p>Modify the <code class=\"language-text\">for</code> loop to use the <code class=\"language-text\">Deno.readFile</code> method to read the \"index.html\" file.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">for</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> req <span class=\"token keyword\">of</span> server<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> html <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Deno<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  req<span class=\"token punctuation\">.</span><span class=\"token function\">respond</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    body<span class=\"token operator\">:</span> html<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Run the app. Since we're reading the disk now, we'll have to pass in the <code class=\"language-text\">--allow-read</code> flag as well.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">deno run --allow-net<span class=\"token operator\">=</span><span class=\"token number\">0.0</span>.0.0:3000 --allow-read<span class=\"token operator\">=</span>. app.ts</code></pre></div>\n<p>This is one way to serve a static file. But Deno provides a \"file server\" module as part of its Standard Library</p>\n<h2 id=\"serving-static-content-with-deno-standard-library\" style=\"position:relative;\"><a href=\"#serving-static-content-with-deno-standard-library\" aria-label=\"serving static content with deno standard library permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Serving static content with Deno Standard Library</h2>\n<p>Import the \"file-server\" module from the Deno standard library.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> serveFile <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"https://deno.land/std@0.77.0/http/file_server.ts\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Modify the <code class=\"language-text\">for</code> loop to use the <code class=\"language-text\">serveFile</code> method to serve up the \"index.html\" file.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">for</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> req <span class=\"token keyword\">of</span> server<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> html <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">serveFile</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> <span class=\"token string\">\"index.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  req<span class=\"token punctuation\">.</span><span class=\"token function\">respond</span><span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Run the program with the \"--allow-net\" and \"--allow-read\" flags</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">deno run --allow-net<span class=\"token operator\">=</span><span class=\"token number\">0.0</span>.0.0:3000 --allow-read<span class=\"token operator\">=</span>. app.ts</code></pre></div>\n<blockquote>\n<p>Note that you can pass <code class=\"language-text\">-A</code> which stands for \"allow all\" so you don't have to pass multiple permissions flags. Handy for development.\"</p>\n</blockquote>\n<p>Now we're serving up static files. But a proper web server needs to handle routes.</p>","frontmatter":{"path":"/webserver/static-files","title":"Serving up static files","order":"6C","section":"6 - Building a Webserver","description":"Burke looks at how to build a simple web server with Deno"}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":"4D","path":"/dependencies/best-practices","title":"Best Practices"}}},{"node":{"frontmatter":{"order":"4E","path":"/dependencies/compatibility-with-node","title":"Compatibility With Node"}}},{"node":{"frontmatter":{"order":"4B","path":"/dependencies/local-dependencies","title":"Local dependencies"}}},{"node":{"frontmatter":{"order":"4C","path":"/dependencies/remote-dependencies","title":"Remote dependencies"}}},{"node":{"frontmatter":{"order":"4A","path":"/dependencies/think-like-a-browser","title":"Thinking like a browser"}}},{"node":{"frontmatter":{"order":"8B","path":"/deploying/containerize-deno-app","title":"Containerizing a Deno Application"}}},{"node":{"frontmatter":{"order":"8C","path":"/deploying/deploy-deno-image","title":"Deploying the Deno image"}}},{"node":{"frontmatter":{"order":"8B","path":"/deploying/push-to-image-registry","title":"Pushing the Deno image to a registry"}}},{"node":{"frontmatter":{"order":"3E","path":"/getting-to-know/arguments-and-flags","title":"CLI Tour"}}},{"node":{"frontmatter":{"order":"3F","path":"/getting-to-know/debugging","title":"Debugging"}}},{"node":{"frontmatter":{"order":"3D","path":"/getting-to-know/deno-object","title":"The Deno object"}}},{"node":{"frontmatter":{"order":"3C","path":"/getting-to-know/first-program","title":"Your first program"}}},{"node":{"frontmatter":{"order":"3A","path":"/getting-to-know/install","title":"Installing Deno"}}},{"node":{"frontmatter":{"order":"3B","path":"/getting-to-know/tooling","title":"Tooling"}}},{"node":{"frontmatter":{"order":"7A","path":"/oak/introducing-oak","title":"Introducing Oak"}}},{"node":{"frontmatter":{"order":"7C","path":"/oak/oak-router","title":"The Oak Router"}}},{"node":{"frontmatter":{"order":"7D","path":"/oak/oak-templates","title":"Templates"}}},{"node":{"frontmatter":{"order":"7B","path":"/oak/simple-oak","title":"A Simple Oak Server"}}},{"node":{"frontmatter":{"order":"7E","path":"/oak/static-files","title":"Serving Static Files"}}},{"node":{"frontmatter":{"order":"5D","path":"/permissions/determining-permissions","title":"Determining Permissions"}}},{"node":{"frontmatter":{"order":"5A","path":"/permissions/granting-permissions","title":"Granting Permissions"}}},{"node":{"frontmatter":{"order":"5C","path":"/permissions/permission-specificity","title":"Permission Specificity"}}},{"node":{"frontmatter":{"order":"5B","path":"/permissions/requesting-permissions","title":"Requesting Permissions"}}},{"node":{"frontmatter":{"order":"6B","path":"/webserver/reading-parameters","title":"Reading the query string"}}},{"node":{"frontmatter":{"order":"6A","path":"/webserver/simple","title":"Building a simple webserver"}}},{"node":{"frontmatter":{"order":"6C","path":"/webserver/static-files","title":"Serving up static files"}}},{"node":{"frontmatter":{"order":"1B","path":"/exercises","title":"How to use the exercises"}}},{"node":{"frontmatter":{"order":"1A","path":"/intro","title":"Introduction"}}},{"node":{"frontmatter":{"order":"2C","path":"/what-is/dependency-hell","title":"Dependency Hell"}}},{"node":{"frontmatter":{"order":"2B","path":"/what-is/secure-by-default","title":"Secure By Default"}}},{"node":{"frontmatter":{"order":"2D","path":"/what-is/typescript-first","title":"TypeScript First"}}},{"node":{"frontmatter":{"order":"2A","path":"/what-is/why-oh-why","title":"What & Why"}}}]}},"pageContext":{}},"staticQueryHashes":["2959687377"]}