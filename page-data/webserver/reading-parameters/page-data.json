{"componentChunkName":"component---src-templates-lesson-template-js","path":"/webserver/reading-parameters","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>Make sure you are on the <a href=\"https://github.com/burkeholland/deno-exercises/tree/6-reading-the-query-string\">6-reading-the-query-string</a> branch to follow along with this section.</p>\n</blockquote>\n<h2 id=\"reading-query-parameters\" style=\"position:relative;\"><a href=\"#reading-query-parameters\" aria-label=\"reading query parameters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reading query parameters</h2>\n<p>An important part of any web server is the ability to handle parameters. These could be query string parameters or parameters passed on the body. Let's look at how to do both of those things with our simple web server.</p>\n<p>Let's modify this app so that it returns a \"Hello\" when we pass in a <code class=\"language-text\">name</code> parameter on the query string. Like this...</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">http://localhost:3000?name<span class=\"token operator\">=</span>World</code></pre></div>\n<p>How do we get that \"name\" parameter? Well, we need to parse the query string to do that. The Deno web server is just that, and it doesn't come with an easy way to just get the query string parameters. But we can get them from the request.</p>\n<p>The <code class=\"language-text\">req.url</code> object holds the URL fragment - which is everything that comes after the address and port. You can use the browser <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\">URLSearchParams</a> object to parse out the query string parameters.</p>\n<blockquote>\n<p>Note that a \"/\" gets prepended to the \"?\" in a query string by the browser and URLSearchParams can't handle this. So we'll strip off the first character with substring().</p>\n</blockquote>\n<p>In the for loop, use the <code class=\"language-text\">URLSearchParams</code> object to parse the <code class=\"language-text\">req.url</code> and get the name.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">for</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> req <span class=\"token keyword\">of</span> server<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> searchParameters <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> searchParameters<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  req<span class=\"token punctuation\">.</span><span class=\"token function\">respond</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    body<span class=\"token operator\">:</span> <span class=\"token string\">\"&lt;h1>Hello World&lt;/h1>\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Check to the see if the <code class=\"language-text\">name</code> parameter was passed in. If so, return it in the HTML. If not, throw a 500 server error.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">for</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> req <span class=\"token keyword\">of</span> server<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> searchParameters <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> searchParameters<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    req<span class=\"token punctuation\">.</span><span class=\"token function\">respond</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      body<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;h1>Hello, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/h1></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    req<span class=\"token punctuation\">.</span><span class=\"token function\">respond</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      status<span class=\"token operator\">:</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span>\n      body<span class=\"token operator\">:</span> <span class=\"token string\">\"The name parameter was not found on the request\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Run the program...</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">deno run --allow-net<span class=\"token operator\">=</span><span class=\"token number\">0.0</span>.0.0:3000 app.ts</code></pre></div>\n<p>Pass in the name parameter on the URL...</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">http://localhost:3000?name<span class=\"token operator\">=</span>World</code></pre></div>\n<p>The browser should return whatever name you pass in. If not, you should get a 500 error with a message saying that a \"name\" parameter is required.</p>\n<h2 id=\"route-parameters\" style=\"position:relative;\"><a href=\"#route-parameters\" aria-label=\"route parameters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Route Parameters</h2>\n<p>But what about route parameters? Query strings are simple enough, but how can we parse out a route parameter such as <code class=\"language-text\">/:name</code>? We can do that, but we'll need more than what Deno offers with its standard library. And, unfortunately, we'll need more than what we can from it's current third-party library offerings as well.</p>\n<p>But what about npm?</p>\n<p>Let's do a quick check. Yep - looks like there is a package called <a href=\"https://www.npmjs.com/package/route-parser\">route-parser</a> ready to go that will parse route parameters for us no problem. This is why Node is so great. Every problem is one package install away. Or maybe that's the problem with Node. I'll let you decide.</p>\n<p>In any event, we're going to get a chance to see how we can use Node modules in our program.</p>\n<h3 id=\"using-node-dependencies\" style=\"position:relative;\"><a href=\"#using-node-dependencies\" aria-label=\"using node dependencies permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using Node Dependencies</h3>\n<p>We can use <em>some</em> Node modules in Deno. If they have strong Node runtime dependencies, they probably won't work. But this one says it's isomorphic. That means that it works in Node and in the browser. If it works in the browser, there is a high probability it will work in Deno.</p>\n<p>But how do we import a Node module into Deno? What is the URL for a Node module.</p>\n<p>There are a few services out there that will allow you to import a package from npm via URL. One of them is called \"unpkg\". Unfortunately, this won't work for us in Deno and that's because of the fact that Deno only supports ES modules. A lot of Node modules predate that syntax and offer CommonJS <code class=\"language-text\">module.exports</code> syntax. Let's look at this \"route-parser\" code what it's doing. If you visit the \"lib\" folder in the repo and look at the <a href=\"https://github.com/rcs/route-parser/blob/master/lib/route.js\">\"route.js\"</a> file. The last line says...</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> Route<span class=\"token punctuation\">;</span></code></pre></div>\n<p>That's CommonJS. It's not going to work with Deno. So what do we do? Well, believe it or not there is a service called <a href=\"https://jspm.org/\">\"jspm\"</a> which will take a module by URL and give you an ES Module compatible import/export. All we have to do is run this module through that service and it will let us import the module...</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> routeParser <span class=\"token keyword\">from</span> <span class=\"token string\">\"https://dev.jspm.io/route-parser@0.0.5\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>But we've got TypeScript here. Which means we need type definitions to use this library. How do we import those?</p>\n<p>First, the types have to exist. Fortunately for us, searching for \"route parser types\" in npm will reveal that the <a href=\"https://definitelytyped.org/\">\"DefinitelyTyped\"</a> library has <a href=\"https://www.npmjs.com/package/@types/route-parser\">typings for \"route parser\"</a>.</p>\n<p>We need this file served up raw. In that case, the \"unpkg\" service will work just fine...</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> routeParser <span class=\"token keyword\">from</span> <span class=\"token string\">\"https://dev.jspm.io/route-parser@0.0.5\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> RouteParser <span class=\"token keyword\">from</span> <span class=\"token string\">\"https://unpkg.com/@types/route-parser@0.1.3/index.d.ts\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now we just need to tell TypeScript that <code class=\"language-text\">routeParser</code> is type of <code class=\"language-text\">RouterParser</code>...</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> routeParser <span class=\"token keyword\">from</span> <span class=\"token string\">\"https://dev.jspm.io/route-parser@0.0.5\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> RouteParser <span class=\"token keyword\">from</span> <span class=\"token string\">\"https://unpkg.com/@types/route-parser@0.1.3/index.d.ts\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Route <span class=\"token operator\">=</span> routeParser <span class=\"token keyword\">as</span> <span class=\"token keyword\">typeof</span> RouteParser<span class=\"token punctuation\">;</span></code></pre></div>\n<p>And now we can use it just like the \"route-parser\" docs show. Let's return the name if we find it and if not, return a static \"404.html\" page.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> serve <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"https://deno.land/std/http/server.ts\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> routeParser <span class=\"token keyword\">from</span> <span class=\"token string\">\"https://dev.jspm.io/route-parser@0.0.5\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> RouteParser <span class=\"token keyword\">from</span> <span class=\"token string\">\"https://unpkg.com/@types/route-parser@0.1.3/index.d.ts\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Route <span class=\"token operator\">=</span> routeParser <span class=\"token keyword\">as</span> <span class=\"token keyword\">typeof</span> RouteParser<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">HOSTNAME</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"0.0.0.0\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token function\">serve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> hostname<span class=\"token operator\">:</span> <span class=\"token constant\">HOSTNAME</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">:</span> <span class=\"token constant\">PORT</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Server is now running on: http://</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">HOSTNAME</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> route <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/:name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> req <span class=\"token keyword\">of</span> server<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> match<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> route<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    req<span class=\"token punctuation\">.</span><span class=\"token function\">respond</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> body<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>match<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    req<span class=\"token punctuation\">.</span><span class=\"token function\">respond</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> body<span class=\"token operator\">:</span> <span class=\"token string\">\"Please pass a name route.\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As you can see - it's a little hacky. It's not the best solution, but it <em>does</em> work. It also shows you what it's like to import type definitions for a file that isn't TypeScript.</p>","frontmatter":{"path":"/webserver/reading-parameters","title":"Reading the query string","order":"6B","section":"6 - Building a Webserver","description":"Burke looks at how to build a simple web server with Deno"}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":"4D","path":"/dependencies/best-practices","title":"Best Practices"}}},{"node":{"frontmatter":{"order":"4E","path":"/dependencies/compatibility-with-node","title":"Compatibility With Node"}}},{"node":{"frontmatter":{"order":"4B","path":"/dependencies/local-dependencies","title":"Local dependencies"}}},{"node":{"frontmatter":{"order":"4C","path":"/dependencies/remote-dependencies","title":"Remote dependencies"}}},{"node":{"frontmatter":{"order":"4A","path":"/dependencies/think-like-a-browser","title":"Thinking like a browser"}}},{"node":{"frontmatter":{"order":"8A","path":"/deploying/containerize-deno-app","title":"Containerizing a Deno Application"}}},{"node":{"frontmatter":{"order":"8C","path":"/deploying/deploy-deno-image","title":"Deploying the Deno image"}}},{"node":{"frontmatter":{"order":"8B","path":"/deploying/push-to-image-registry","title":"Pushing the Deno image to a registry"}}},{"node":{"frontmatter":{"order":"3E","path":"/getting-to-know/arguments-and-flags","title":"CLI Tour"}}},{"node":{"frontmatter":{"order":"3F","path":"/getting-to-know/debugging","title":"Debugging"}}},{"node":{"frontmatter":{"order":"3D","path":"/getting-to-know/deno-object","title":"The Deno object"}}},{"node":{"frontmatter":{"order":"3C","path":"/getting-to-know/first-program","title":"Your first program"}}},{"node":{"frontmatter":{"order":"3A","path":"/getting-to-know/install","title":"Installing Deno"}}},{"node":{"frontmatter":{"order":"3B","path":"/getting-to-know/tooling","title":"Tooling"}}},{"node":{"frontmatter":{"order":"7A","path":"/oak/introducing-oak","title":"Introducing Oak"}}},{"node":{"frontmatter":{"order":"7C","path":"/oak/oak-router","title":"The Oak Router"}}},{"node":{"frontmatter":{"order":"7D","path":"/oak/oak-templates","title":"Templates"}}},{"node":{"frontmatter":{"order":"7B","path":"/oak/simple-oak","title":"A Simple Oak Server"}}},{"node":{"frontmatter":{"order":"7E","path":"/oak/static-files","title":"Serving Static Files"}}},{"node":{"frontmatter":{"order":"5D","path":"/permissions/determining-permissions","title":"Determining Permissions"}}},{"node":{"frontmatter":{"order":"5A","path":"/permissions/granting-permissions","title":"Granting Permissions"}}},{"node":{"frontmatter":{"order":"5C","path":"/permissions/permission-specificity","title":"Permission Specificity"}}},{"node":{"frontmatter":{"order":"5B","path":"/permissions/requesting-permissions","title":"Requesting Permissions"}}},{"node":{"frontmatter":{"order":"6B","path":"/webserver/reading-parameters","title":"Reading the query string"}}},{"node":{"frontmatter":{"order":"6A","path":"/webserver/simple","title":"Building a simple webserver"}}},{"node":{"frontmatter":{"order":"6C","path":"/webserver/static-files","title":"Serving up static files"}}},{"node":{"frontmatter":{"order":"1B","path":"/exercises","title":"How to use the exercises"}}},{"node":{"frontmatter":{"order":"1A","path":"/intro","title":"Introduction"}}},{"node":{"frontmatter":{"order":"2C","path":"/what-is/dependency-hell","title":"Dependency Hell"}}},{"node":{"frontmatter":{"order":"2B","path":"/what-is/secure-by-default","title":"Secure By Default"}}},{"node":{"frontmatter":{"order":"2D","path":"/what-is/typescript-first","title":"TypeScript First"}}},{"node":{"frontmatter":{"order":"2A","path":"/what-is/why-oh-why","title":"What & Why"}}}]}},"pageContext":{}},"staticQueryHashes":["2959687377"]}