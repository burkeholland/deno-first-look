{"componentChunkName":"component---src-templates-lesson-template-js","path":"/getting-to-know/arguments-and-flags","result":{"data":{"markdownRemark":{"html":"<p>For a full list of arguments you can pass to Deno, execute <code class=\"language-text\">deno -h</code>.</p>\n<p>There are quite a few built-in features for Deno, including a formatter, a linter and a built-in test runner. For any of the built-in arguments, you can select the argument and the pass <code class=\"language-text\">-h</code> again after the argument to find out what you can do with a command, what options are available and what flags you can pass.</p>\n<ul>\n<li>\n<p>Inspect the <code class=\"language-text\">fmt</code> argument using the <code class=\"language-text\">-h</code> command.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">deno <span class=\"token function\">fmt</span> -h</code></pre></div>\n</li>\n<li>\n<p>Change the formatting in the <code class=\"language-text\">app.ts</code> file so that a default value is passed for the message if <code class=\"language-text\">args</code> doesn't exist. Make sure to use single quotes.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> message<span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> Deno<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"World\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>message<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>Run the formatter on the <code class=\"language-text\">app.ts</code> file</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">deno <span class=\"token function\">fmt</span> app.ts</code></pre></div>\n</li>\n</ul>\n<p>Notice that the formatter changes the single-quotes to double-quotes. Formatting in Deno is done by the <a href=\"https://github.com/dprint/dprint\">dprint library</a> with the default configuration. As of the time of this writing, there is no way to pass a configuration to dprint. My personal preference is to use Prettier and let the editor worry about formatting. The same goes for linting.</p>\n<h2 id=\"passing-in-arguments\" style=\"position:relative;\"><a href=\"#passing-in-arguments\" aria-label=\"passing in arguments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Passing in Arguments</h2>\n<p>Arguments can be passed to the Deno CLI after the path of the file to be executed.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">deno run app.ts a b c</code></pre></div>\n<p>These arguments are referenced within the file by looking at the <code class=\"language-text\">Deno.args</code> object.</p>\n<ul>\n<li>\n<p>Modify the code in <code class=\"language-text\">app.ts</code> to log out all incoming arguments...</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Deno<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>Run the code from the terminal. Pass in the values a, b and c as args</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">deno run app.ts a b c\n\nCheck file:///home/burkeholland/dev/deno-first-look-exercises/app.ts\n<span class=\"token punctuation\">[</span> <span class=\"token string\">\"a\"</span>, <span class=\"token string\">\"b\"</span>, <span class=\"token string\">\"c\"</span> <span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n<li>\n<p>Modify the code to echo out the value of the argument passed in and concatenate it with \"Hello\"</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> Deno<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>message<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>Run the program</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">deno run app.ts World\n\nCheck file:///home/burkeholland/dev/deno-first-look-exercises/app.ts\nHello World</code></pre></div>\n</li>\n</ul>\n<p>Deno doesn't do named arguments by default, but these can be passed in as flags using the Standard Library, which we'll examine later on in this course.</p>\n<h2 id=\"flags\" style=\"position:relative;\"><a href=\"#flags\" aria-label=\"flags permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Flags</h2>\n<p>Deno has built-in flags that can be passed to the runtime. One of these you have already used - the <code class=\"language-text\">--allow-check</code> flag.</p>\n<p>Flags that are passed to Deno <strong>must</strong> be passed <strong>before</strong> the name of the file to execute. If they are passed after, they will be ignored. This is important as it can cause quite a bit of confusion if your flags are working the way you think they will.</p>\n<p>There are several flags listed from the help, but let's take a look at a few of the ones you will use the most often.</p>\n<h3 id=\"--watch----unstable\" style=\"position:relative;\"><a href=\"#--watch----unstable\" aria-label=\"  watch    unstable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>--watch &#x26; --unstable</h3>\n<p>One of my favorite features of Deno is the built-in watcher. It's kind of like supervisor or nodemon if you've used Node before. It just watches for file changes and then re-builds your TypeScript and restarts the process.</p>\n<ul>\n<li>\n<p>Execute the <code class=\"language-text\">app.ts</code> file with the built-in watcher by passing the <code class=\"language-text\">--watch</code> flag.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">deno run --watch app.ts World\n\nerror: The following required arguments were not provided:\n--unstable\n\nUSAGE:\n  deno run <span class=\"token operator\">&lt;</span>SCRIPT_ARG<span class=\"token operator\">></span><span class=\"token punctuation\">..</span>. --unstable --watch\n\nFor <span class=\"token function\">more</span> information try --help</code></pre></div>\n</li>\n</ul>\n<p>Uh oh - what happened? The CLI is telling us that we are missing a required flag to use the <code class=\"language-text\">--watch</code> feature. That is the <code class=\"language-text\">--unstable flag</code>. The <code class=\"language-text\">--unstable</code> flag allows Deno to run with still unstable features. Watch is one of those features. You'll encounter quite a few features in Deno (which is considered stable) that are behind the \"unstable\" flag at the time of this writing. That's important to note since you might assume that Deno being \"stable\" means all of it is stable. That's not the case.</p>\n<ul>\n<li>\n<p>Run the program again with the <code class=\"language-text\">--unstable --watch</code> flags...</p>\n<div class=\"gatsby-highlight\" data-language=\"dotnetcli\"><pre class=\"language-dotnetcli\"><code class=\"language-dotnetcli\">deno run --unstable --watch app.ts World\n\nCheck file:///home/burkeholland/dev/deno-first-look-exercises/app.ts\nHello World\nWatcher Process terminated! Restarting on file change...</code></pre></div>\n</li>\n<li>\n<p>Modify the code in <code class=\"language-text\">app.ts</code> so that it transforms the output to uppercase</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">const message: String <span class=\"token operator\">=</span> Deno.args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole.log<span class=\"token punctuation\">(</span><span class=\"token variable\"><span class=\"token variable\">`</span>Hello $<span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">}</span><span class=\"token variable\">`</span></span>.toUpperCase<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>Save the file and notice that the terminal updates with the new output</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Watcher File change detected<span class=\"token operator\">!</span> Restarting<span class=\"token operator\">!</span>\nCheck file:///home/burkeholland/dev/deno-first-look-exercises/app.ts\nHELLO WORLD\nWatcher Process terminated<span class=\"token operator\">!</span> Restarting on <span class=\"token function\">file</span> change<span class=\"token punctuation\">..</span>.</code></pre></div>\n</li>\n</ul>\n<h2 id=\"others\" style=\"position:relative;\"><a href=\"#others\" aria-label=\"others permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Others</h2>\n<p>There are other flags that can be passed in that deal with different aspects that are unique to Deno. These we will take a closer look at when we talk about concepts like dependencies and permissions. For now, the important things to know about the Deno CLI are...</p>\n<ol>\n<li>Pass -h after any option to see a description, sample usage and sub-options</li>\n<li>Pass in all flags <strong>before</strong> the file name</li>\n<li>Pass in your own arguments <strong>after</strong> the file name</li>\n</ol>","frontmatter":{"path":"/getting-to-know/arguments-and-flags","title":"CLI Tour","order":"3E","section":"Getting to know Deno","description":"Burke looks at how to pass arguments and flags to the Deno CLI"}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":"1A","path":"/intro","title":"Introduction"}}},{"node":{"frontmatter":{"order":"4E","path":"/dependencies/compatibility-with-node.md","title":"Compatibility With Node"}}},{"node":{"frontmatter":{"order":"4B","path":"/dependencies/local-dependencies.md","title":"Local dependencies"}}},{"node":{"frontmatter":{"order":"4D","path":"/dependencies/best-practices.md","title":"Best Practices"}}},{"node":{"frontmatter":{"order":"4C","path":"/dependencies/remote-dependencies.md","title":"Remote dependencies"}}},{"node":{"frontmatter":{"order":"4A","path":"/dependencies/think-like-a-browser.md","title":"Thinking like a browser"}}},{"node":{"frontmatter":{"order":"8A","path":"/oak/deploying","title":"Finding a Host"}}},{"node":{"frontmatter":{"order":"3E","path":"/getting-to-know/arguments-and-flags","title":"CLI Tour"}}},{"node":{"frontmatter":{"order":"3F","path":"/getting-to-know/debugging","title":"Debugging"}}},{"node":{"frontmatter":{"order":"3C","path":"/getting-to-know/deno-object","title":"The Deno object"}}},{"node":{"frontmatter":{"order":"3D","path":"/getting-to-know/first-program","title":"Your first program"}}},{"node":{"frontmatter":{"order":"3A","path":"/getting-to-know/install","title":"Installing Deno"}}},{"node":{"frontmatter":{"order":"3B","path":"/getting-to-know/tooling","title":"Tooling"}}},{"node":{"frontmatter":{"order":"7A","path":"/oak/introducing-oak","title":"Introducing Oak"}}},{"node":{"frontmatter":{"order":"7C","path":"/oak/oak-router","title":"The Oak Router"}}},{"node":{"frontmatter":{"order":"7C","path":"/oak/oak-templates","title":"Templates"}}},{"node":{"frontmatter":{"order":"7B","path":"/oak/simple-oak","title":"A Simple Oak Server"}}},{"node":{"frontmatter":{"order":"7E","path":"/oak/simple-oak","title":"Servering Static Files"}}},{"node":{"frontmatter":{"order":"5D","path":"/permissions/determining-permissions","title":"Determining Permissions"}}},{"node":{"frontmatter":{"order":"5A","path":"/permissions/granting-permissions","title":"Granting Permissions"}}},{"node":{"frontmatter":{"order":"5C","path":"/permissions/permission-specificity","title":"Permission Specificity"}}},{"node":{"frontmatter":{"order":"5B","path":"/permissions/requesting-permissions","title":"Requesting Permissions"}}},{"node":{"frontmatter":{"order":"6D","path":"/webserver/handling-routes","title":"Handling Routes"}}},{"node":{"frontmatter":{"order":"6B","path":"/webserver/reading-parameters","title":"Reading the query string"}}},{"node":{"frontmatter":{"order":"6A","path":"/webserver/simple","title":"Building a simple webserver"}}},{"node":{"frontmatter":{"order":"6C","path":"/webserver/static-files","title":"Servering up static files"}}},{"node":{"frontmatter":{"order":"2C","path":"/what-is/dependency-hell","title":"Dependency Hell"}}},{"node":{"frontmatter":{"order":"2B","path":"/what-is/secure-by-default","title":"Secure By Default"}}},{"node":{"frontmatter":{"order":"2D","path":"/what-is/typescript-first","title":"TypeScript First"}}},{"node":{"frontmatter":{"order":"2A","path":"/what-is/why-oh-why","title":"Why"}}}]}},"pageContext":{}},"staticQueryHashes":["2959687377"]}